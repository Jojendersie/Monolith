#version 330

flat in uint gs_materialCode;	// The material code
flat in vec3 gs_normal;
flat in vec4 gs_viewDir_phase;
out vec4 fragColor;

#include "material.glsl"
#include "globalubo.glsl"

void main()
{
	// Decode transparency or color rotation
	int code = int(gs_materialCode);
	float yvar = float((code >> 28) & 0xf) / 15.0;

	// Decode rgb color from material
	float color_y  = float(code & 0xff) / 255.0;
	
	color_y *= (sin(c_fTime * 3.0 + gs_viewDir_phase.w) * 0.5 + 0.5) * yvar + 1 - yvar;
	float color_pb = (float((code >> 18) & 0x1f) - 15.0) / 255.0;
	float color_pr = (float((code >> 23) & 0x1f) - 15.0) / 255.0;
	vec3 color = vec3(color_y + 0.22627 * color_pb + 11.472 * color_pr,
					color_y - 3.0268 * color_pb - 5.8708 * color_pr,
					color_y + 14.753 * color_pb + 0.0082212 * color_pr);
	//color = min(vec3(1,1,1), max(vec3(0,0,0), color));

	// Decode other material parameters
	float shininess = float((code >> 12) & 0xf) / 15.0;
	// Use code as power of to and compute: (2^spec) * 3
	float specular = (1 << ((code >> 8) & 0xf)) * 3.0;
	float emissive = float((code >> 17) & 1);
	
	fragColor.xyz = Lightning(gs_normal, gs_viewDir_phase.xyz, shininess, specular, color, emissive);
	fragColor.a = 1;
}
