#version 330

// A SSAO implementatoin that is pretty close to "Alchemy SSAO"
// An excellent overview of the state of the art in SSAO can be found here:
// http://frederikaalund.com/wp-content/uploads/2013/05/A-Comparative-Study-of-Screen-Space-Ambient-Occlusion-Methods.pdf

in vec2 vs_out_TexCoord;

uniform sampler2D depthTex;

out float outputAO;

#include "../globalubo.glsl"
#include "../utils.glsl"

// Configuration values:

#if defined(HIGHQ)
	#define NUM_SAMPLES 32
	const float sampleRadiusSize = 1.4; // Is also dependent of screen depth. Keep in mind that higher values are slower (worse caching) and bring more screen border
	const float aoIntensityScale = 1.0;
#elif defined(MEDIUMQ)
	#define NUM_SAMPLES 16
	const float sampleRadiusSize = 0.8;
	const float aoIntensityScale = 0.6;
#else
	#define NUM_SAMPLES 8
	const float sampleRadiusSize = 0.2;
	const float aoIntensityScale = 0.3;
#endif

const float bias = 0.0002; // Tweaks intensity angle dependently and serves to reduce noise on flat surfaces. Higher removes more noise, but too high leads to artifacts in corners.
const float sampleRadiusBias = 0.00001; // minimum sampling radius on screen texture. Higher removes more noise, but too high leads to artifacts in corners.

// Random number - http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
// Seems good enough (see also http://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner)
float RandomNumber(vec2 seed)
{
	return fract(sin(dot(seed.xy, vec2(12.9898,78.233))) * 43758.5453);
}

vec3 GetViewSpacePos(vec2 textureCordinate)
{
	vec2 deviceCor = textureCordinate * 2 - vec2(1.0);
	vec3 viewspaceLookDir = normalize(vec3(deviceCor * c_vInverseProjection.xy, 1)); 
	float depth = LinearizeZBufferDepth(textureLod(depthTex, textureCordinate, 0).r);
	return depth * viewspaceLookDir;
}

void main()
{
	vec3 viewSpacePosition = GetViewSpacePos(vs_out_TexCoord);
	// Compute normal from derivatives
	vec3 normal = normalize(cross(dFdy(viewSpacePosition), dFdx(viewSpacePosition)));

	float radiusScale = sampleRadiusSize / viewSpacePosition.z;

	float ao = 0.0f;
	float scaledBias = bias * viewSpacePosition.z; // original paper suggests to scale this to reduce noise in distance.
	for (int i=0; i<NUM_SAMPLES; ++i)
	{
		// Random sample from sample fkt - still better than sampling a texture.. right?
		float phi = RandomNumber(vs_out_TexCoord + vec2(0, i)) * PI_2;
		float radius = sqrt(RandomNumber(vs_out_TexCoord + vec2(i, 0))) * radiusScale + sampleRadiusBias;

		vec2 samplingTexCoord = vs_out_TexCoord + vec2(sin(phi), cos(phi)) * radius;
		vec3 samplingPosVS = GetViewSpacePos(samplingTexCoord);

		vec3 diff = samplingPosVS - viewSpacePosition;
		float distSq = dot(diff, diff) + 0.0000001;

		ao += saturate(dot(normal, diff) - scaledBias) / distSq;
	}
	ao /= NUM_SAMPLES;

	outputAO = 1 - ao * aoIntensityScale;
}
